// Generated by CoffeeScript 1.3.3
(function() {
  var Getbot, clearLine, clearLines, colors, err, fs, loadList, log, makeReadable, program, progressbar, startBot;

  fs = require('fs');

  colors = require('colors');

  program = require('commander');

  Getbot = require('../lib/getbot');

  progressbar = require('progress');

  exports.run = function() {
    var list, listDownload, options, version, _ref;
    version = '0.0.7c';
    program.version(version).usage('[options] <URL>').option('-d, --destination [path]', 'the destination for the downloaded file(s)').option('-f, --force', 'force getbot to overwrite any existing file or folder').option('-c, --connections [number]', 'max connections to try', parseInt, 5).option('-u, --user [string]', 'username used for basic http auth').option('-p, --pass [string]', 'password used for basic http auth').option('-l, --list [path]', 'a list of urls (one on each line) to read in and download from').option('-q, --quiet', 'run getbot silently').parse(process.argv);
    if (((_ref = program.args) != null ? _ref.length : void 0) === 1) {
      list = [program.args[0]];
    } else {
      list = loadList(program.list);
      list.reverse();
      listDownload = true;
    }
    options = {
      connections: program.connections,
      destination: program.destination,
      force: program.force,
      user: program.user,
      pass: program.pass,
      quiet: program.quiet,
      listDownload: listDownload,
      version: version
    };
    try {
      startBot(options, list);
    } catch (error) {
      err(error);
    }
  };

  startBot = function(options, list) {
    var bar, getbot,
      _this = this;
    options.address = list.pop();
    getbot = new Getbot(options);
    bar = null;
    return getbot.on('noresume', function(statusCode) {
      return log("Resume not supported, using only one connection...", statusCode, '\n');
    }).on('downloadStart', function(statusCode) {
      var update, updateTick,
        _this = this;
      if (!options.quiet) {
        log("" + getbot.fileName + " (" + (makeReadable(getbot.fileSize)) + ")", statusCode, '\n');
        this.readableSize = makeReadable(getbot.fileSize);
        bar = new progressbar('getbot '.green + '    ‹:bar› :percent :size @ :rate', {
          complete: "—".green,
          incomplete: ' ',
          width: 20,
          total: parseInt(getbot.fileSize, 10)
        });
        update = 0;
        updateTick = setInterval(function() {
          var rate;
          rate = "" + (makeReadable(_this.rate)) + "/s";
          bar.tick(_this.tickBuffer, {
            'rate': rate,
            'size': _this.readableSize
          });
          _this.tickBuffer = 0;
          if (parseInt(getbot.fileSize) === parseInt(getbot.totalDownloaded)) {
            log("Download finished.\n", null, '\n');
            return clearInterval(updateTick);
          }
        }, 500);
      }
    }).on('data', function(data, rate) {
      if (!options.quiet) {
        this.tickBuffer += data.length;
        this.totalDL += this.tickBuffer;
      }
    }).on('allPartsComplete', function() {
      if (list.length >= 1) {
        return startBot(options, list);
      } else {
        if (options.quiet) {
          return process.exit(0);
        }
      }
    }).on('fileExists', function(filePath) {
      return err(filePath + " already exists, aborting...", null, '\n');
    }).on('error', function(error) {
      return err(error, null, '\n');
    });
  };

  loadList = function(filename) {
    var downloadList;
    downloadList = [];
    fs.readFileSync(filename).toString().split('\n').forEach(function(line) {
      if (line !== '') {
        return downloadList.push(line);
      }
    });
    return downloadList;
  };

  makeReadable = function(bytes) {
    var precision, unit, units;
    units = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    unit = 0;
    while (bytes >= 1024) {
      unit++;
      bytes = bytes / 1024;
      precision = unit > 2 ? 2 : 1;
    }
    return "" + (bytes.toFixed(precision)) + " " + units[unit];
  };

  log = function(message, status, prefix) {
    var state;
    prefix = prefix ? prefix : "";
    state = status ? colors.inverse(("" + status).green) : "   ";
    return process.stdout.write(prefix + 'getbot '.green + state + (" " + message + "\n"));
  };

  err = function(error, status, prefix) {
    prefix = prefix ? prefix : "";
    err = status ? status : "ERR";
    process.stdout.write(prefix + 'getbot '.green + colors.inverse(("" + err).red) + (" " + (error.toString().replace("Error: ", "")) + "\n\n"));
    return process.exit(1);
  };

  clearLine = function() {
    return process.stdout.write('\r\x33[2K');
  };

  clearLines = function() {
    return process.stdout.write('\r\x33[2K\r\x33[1A\r\x33[2K');
  };

}).call(this);
